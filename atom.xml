<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Code Infinity]]></title>
  <link href="http://www.orcame.com/atom.xml" rel="self"/>
  <link href="http://www.orcame.com/"/>
  <updated>2013-12-29T22:50:32+08:00</updated>
  <id>http://www.orcame.com/</id>
  <author>
    <name><![CDATA[orcame]]></name>
    <email><![CDATA[orcame@outlook.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Windows Azure Shared Access Signature简介]]></title>
    <link href="http://www.orcame.com/blog/2013/12/29/iwindows-azure-sas-introduce/"/>
    <updated>2013-12-29T22:26:00+08:00</updated>
    <id>http://www.orcame.com/blog/2013/12/29/iwindows-azure-sas-introduce</id>
    <content type="html"><![CDATA[<h2>What</h2>

<p>Shared Access Signature(SAS),共享访问签名，是用于提供对Windows Azure Storage中的Container，Blob，Table以及Queue在特定时间范围内进行有限权限访问的URL。</p>

<!--more-->


<h2>Why</h2>

<p>通常情况下，对Azure Storage的访问是通过账户名和密钥来实现的，这样的认证方式赋予了使用者包括增删改在内的最大的访问权限，而实际应用当中，有许多场景是希望能够限定用户的权限的，比方常见的只读权限，并且也不希望将密钥泄露给用户，这样存在很大的安全隐患。使用SAS可以很好的解决这个问题。</p>

<h2>How</h2>

<h3>功能介绍</h3>

<p>SAS提供的功能包括</p>

<h5>For Blob</h5>

<pre><code>+ 读写Blob及其属性和元数据
+ 删除、租赁和创建 Blob 快照
+ 读取Container的Blob列表
</code></pre>

<h5>For Table</h5>

<pre><code>+ 增、删、改、查（version&gt;='2012-02-12'）
</code></pre>

<h5>For Queue</h5>

<pre><code>+ 增删改队列消息（version&gt;='2012-02-12'）
+ 读取队列元数据，消息计数（version&gt;='2012-02-12'）
</code></pre>

<h3>表现形式</h3>

<p>一个典型的SAS（以Blob为例）为如下形式</p>

<pre><code>https://myaccount.blob.core.windows.net/sascontainer/sasblob.txt?sv=2012-02-12&amp;st=2013-04-29T22%3A18%3A26Z&amp;se=2013-04-30T02%3A23%3A26Z&amp;sr=b&amp;sp=rw&amp;sig=Z%2FRHIX5Xcg0Mq2rqI3OlWTjEg2tYkboXr1P9ZUXDtkk%3D
</code></pre>

<p>由以下几部分组成</p>

<pre><code>1. Blob URL
    &gt; https://myaccount.blob.core.windows.net/sascontainer/sasblob.txt
    &gt; Blob文件的网络路径
2. Storage Service Version(sv)
    &gt; sv=2012-02-12
    &gt; 这是在2012-02-12版本后新加的一个参数，用来标识Storage Service所使用的版本
3. Start Time（st)
    &gt; st=2013-04-29T22%3A18%3A26Z
    &gt; 采用[ISO8061][ISO8061]格式表示的日期，用来标识该SAS生效的起始时间，可以省略（注意，不是为空，表示立即生效)。
    &gt; 官方文档上说采用的是ISO8061格式，我查了半天没找到[ISO8061][ISO8061],只有[ISO8601][ISO8601]，API产生的字符串是符合ISO8601的规范的，这里很有可能是[ISO8601][ISO8601]才对。
    &gt; 附上[官方文档][part1]原文
    &gt;&gt; Specified in an ISO 8061 format. If you want the SAS to be valid immediately, omit the start time.
4. Expiry Time(et)
    &gt; se=2013-04-30T02%3A23%3A26Z
    &gt; 采用[ISO8061][ISO8061]格式(疑问同上)表示的日期，用来标识该SAS失效时间，这个参数是必须的
    &gt; 注意，在2012-02-12以前的版本中，SAS默认的有效时长最长1小时，也就是说即便你设定的st和se之间的差值为大于一小时的任何时长，该SAS还是会在1小时后自动失效
5. Resource(sr)
    &gt; sr=b
    &gt; 表明该资源是一个Blob
6. Permissions(sp)
    &gt; sp=rw
    &gt; 该SAS链接拥有的权限，这里是读和写
7. Signature(sig)
    &gt; sig=Z%2FRHIX5Xcg0Mq2rqI3OlWTjEg2tYkboXr1P9ZUXDtkk%3D
    &gt; 用于验证对Blob访问的签名
</code></pre>

<h3>SAS与SAP</h3>

<p>可以通过两种方式来创建共享访问签名:<br/>
1.  独立的SAS（Ad Hoc SAS),这个没什么好说的，前面已经做了很多介绍，后面会有代码演示如何创建。
2.  引用SAP（Shared Access Policy，共享访问策略）的SAS，这里需要先介绍下什么是SAP，SAP的组成形式和SAS是一样的，不同的是SAP是定义在容器，也就是Container、Queue以及Table，级别上的，SAP需要有一个名称，也可以随时被删除（即便Expiry Time还没有到），删除即失效。</p>

<h3>失效</h3>

<p>使用SAS的一个关键问题就是何时失效，上面已经有了这方面的介绍，这里做个小结<br/>
1.  SAS指定的失效时间到了
2.  SAS引用的SAP的失效时间到了，有两种情况可以导致SAP失效时间到，一是SAP指定的失效时间过了，二是管理员更改了SAP的设定，使其失效时间指向了一个已经过去的时间（这是回收SAP的一种方式）。
3.  SAS引用的SAP被删除了（这是回收SAP的另外一种方式），高度注意，如果你删掉了一个未过期的SAP，同时创建了另一个同名的有效（未过期）SAP，那么所有引用了该SAP的SAS会继续生效（注意，此时原继承的过期时间仍然未到），所以为避免发生未预期的错误，需要注意用不同的名字创建SAP
4.  创建SAS的账号密钥被重置，这种情况下，所有使用该密钥创建的SAP，SAS都会失效，慎用</p>

<h3>使用</h3>

<p>下面用代码片段讲解一下如何使用SAS，Window Aure提供了丰富的API来帮助我们实现该功能，这里以.Net平台，C#语言为例</p>

<hr />

<p><strong><center>——未完待续中——</center></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何在多台电脑上使用Octopress写博客]]></title>
    <link href="http://www.orcame.com/blog/2013/12/26/octopress-multi-compoter/"/>
    <updated>2013-12-26T13:56:00+08:00</updated>
    <id>http://www.orcame.com/blog/2013/12/26/octopress-multi-compoter</id>
    <content type="html"><![CDATA[<p>英文好的，请直接猛击<a href="http://blog.zerosharp.com/clone-your-octopress-to-blog-from-two-places/">这里</a>。英文不好的，就听我啰嗦几句。</p>

<p>先来讲讲基础知识，我们需要有两个branch，一个叫<code>master</code>，这个是默认的，不能改，被存储在blog根目录的<code>_deploy</code>文件夹下，是用来存放生成好的blog站点文件的。另一个叫<code>source</code>(名字可以自己定义，此文中指定为<em>source</em>),是用来存放markdown源文件，theme，plugin等用于生成blog所需要的所有文件的。</p>

<!--more-->


<p>如果你是按照<a href="http://www.orcame.com/blog/2013/03/02/hello-git-world/">这个</a>方式创建的博客，那么你远端是没有<code>source</code>分支的(如果远端已经创建<code>source分</code>支,请略过)。首先需要创建一个<code>source</code>分支，在本地blog根目录下执行</p>

<pre><code>git branch source   //创建本地source分支
git checkout source //切换本地分支到source
git add --all           //将所有文件add到source分支
git commit -m "init"    //commit
git push origin source  //将source分支push到服务器
</code></pre>

<p>这样便将本地所有源文件(除了<code>_deploy</code>文件夹下的内容)push到远端的<code>source</code>分支了</p>

<p>换一台电脑，将远端<code>source</code>分支clone到本地</p>

<pre><code>git clone -b source git@github.com:xxxxx
</code></pre>

<p>可以发现，在blog根目录中<code>_deploy</code>文件夹(可能没有)是空的(如果不是空的，请清空)，下一步是将远端<code>master</code>分支clone到本地的_deploy文件夹</p>

<pre><code>git clone -b master git@github.com:xxxxx _deploy
</code></pre>

<p>然后需要做一些安装配置的步骤</p>

<pre><code>gem install bundler
bundle install
</code></pre>

<p>接下来<code>rake generate</code>就可以生成blog文件了。</p>

<p>需要注意的是，做完任何更改后（例如新增了一篇文章），需要提交到<code>source</code>分支</p>

<pre><code>git add .
git commit -am "Some comment here." 
git push origin source  # update the remote source branch 
</code></pre>

<p>然后<code>rake deploy</code>来发布blog。</p>

<p>当切换到另外一台电脑时候，同样需要把远端<code>source</code>和<code>master</code>分支的新内容pull到本地</p>

<pre><code>cd octopress
git pull origin source  # update the local source branch
cd ./_deploy
git pull origin master  # update the local master branch
</code></pre>

<p>总结起来就是:<br/>
1. 从远端<code>source</code>和<code>master</code>同步数据<br/>
2. 写文章（或其他改动，例如更改theme）<br/>
3. push到远端<code>source</code>分支<br/>
4. <code>rake deploy</code>（相当于push到远端<code>master</code>分支）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git备忘录]]></title>
    <link href="http://www.orcame.com/blog/2013/12/26/git-memo/"/>
    <updated>2013-12-26T12:01:00+08:00</updated>
    <id>http://www.orcame.com/blog/2013/12/26/git-memo</id>
    <content type="html"><![CDATA[<h3>教程篇</h3>

<p><a href="http://pcottle.github.io/learnGitBranching/">这里</a>是一个在线演示git工作过程的网站，看起来很高端的样子，mark一下。</p>

<p><a href="https://code.csdn.net/DOC_CSDN/git_lxf">这里</a>是code.csdn.net上面的一个很不错的git教程，有文字，图片和视频</p>

<!--more-->


<h3>branch篇</h3>

<p>Clone一个远端分支</p>

<pre><code>git clone -b &lt;branch&gt; &lt;remote_repo&gt;
//for example
git clone -b my-branch git@github.com:user/respository.git
</code></pre>

<p>参考<a href="http://stackoverflow.com/questions/1911109/git-clone-a-specific-branch">这里</a></p>

<p>创建分支</p>

<pre><code>git branch &lt;branch&gt;
//for example
git branch newbranch
</code></pre>

<p>切换本地分支</p>

<pre><code>git checkout &lt;branch&gt;
</code></pre>

<p>创建远程分支，就是将本地分支push到远程</p>

<pre><code>git push origin &lt;branch&gt;
</code></pre>

<p>或者</p>

<pre><code>git push origin &lt;local_branch_name&gt;:&lt;remote_branch_name&gt;
</code></pre>

<h3>checkout篇</h3>

<p>当遇到本地和服务器上的代码有冲突</p>

<pre><code>git checkout filename 
</code></pre>

<p>用来撤销本地<strong>指定</strong>文件的更改</p>

<pre><code>git checkout -- .
</code></pre>

<p>用来撤销本地<strong>所有</strong>文件的更改</p>

<h3>url篇</h3>

<p>最近发现重新clone了代码做push操作的时候总是要输入用户名和密码，这非常讨厌，明明已经有了ssh key的。
找来找去，原因是clone的时候用的是<code>https</code>的地址，例如</p>

<pre><code>https://github.com/&lt;user-name&gt;/&lt;repository&gt;.git
</code></pre>

<p>这个地址是不会走ssh验证的，需要更改为</p>

<pre><code>git@github.com:&lt;user-name&gt;/&lt;repository&gt;.git
</code></pre>

<p>这个地址可以从repository主页上，点击右边的clone URL下面的<strong>SSH</strong>按钮获得
切换url的命令是</p>

<pre><code>git remote set-url origin git@github.com:&lt;user-name&gt;/&lt;repository&gt;.git
</code></pre>

<p>参考<a href="http://stackoverflow.com/questions/6565357/git-push-requires-username-and-password">这里</a></p>

<hr />

<p><strong><center>——未完待续中——</center></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[新换系统之吐槽ruby安装]]></title>
    <link href="http://www.orcame.com/blog/2013/12/25/xin-huan-xi-tong-zhi-tu-cao-rubyan-zhuang/"/>
    <updated>2013-12-25T22:53:00+08:00</updated>
    <id>http://www.orcame.com/blog/2013/12/25/xin-huan-xi-tong-zhi-tu-cao-rubyan-zhuang</id>
    <content type="html"><![CDATA[<p>手贱把Ubuntu搞挂了，不要问我怎么搞的，我也不知道。刚刚好，觉得那个Unity环境真是非常非常非常非常非常无法忍受的难用到无与伦比。听说有个家伙叫mint，用了都说好。<br/>
下载&#8211;烧U盘&#8211;安装，一通折腾后开始正式体验。初步印象感觉mint系统还不错啦，就是那个图标都是圆角是不是太土包子了？一看到那个默认的firefox图标我就想吐！罢了，反正也不用，删掉，装个chrome。装完了才发现，无比高端大气上档次的chrome图标居然也被系统弄成圆角方块疙瘩了。这瞬间变村姑啊，也忍了！
进入正题，把博客从github上clone下来之后，就又遇到了每次装系统必折腾之ruby版本问题。</p>

<!--more-->


<h3>我安装，我快乐</h3>

<p>对于Ruby，我是完全不懂，也不知道为什么要搞那么复杂。</p>

<p>既然需要1.9.3版本的，那先来<code>sudo apt-get install ruby1.9.3</code>，这一步没有任何问题，安装成功，执行<code>ruby -v</code>显示<code>ruby 1.9.3p194 (2012-04-20 revision 35410) [i686-linux]</code></p>

<h3>悲剧是怎样炼成的</h3>

<p>接下来进入blob文件夹根目录，执行<code>gem install bundler</code>,这一步顺利通过，悲剧马上来袭。当欢欢喜喜的执行<code>bundle install</code>时候，一个华丽丽的错误出现了</p>

<pre><code>Gem::Installer::ExtensionBuildError: ERROR: Failed to build gem native extension.

        /usr/bin/ruby1.9.1 extconf.rb 
/usr/lib/ruby/1.9.1/rubygems/custom_require.rb:36:in `require': cannot load such file -- mkmf (LoadError)
    from /usr/lib/ruby/1.9.1/rubygems/custom_require.rb:36:in `require'
    from extconf.rb:1:in `&lt;main&gt;'


Gem files will remain installed in /home/xxx/.bundler/tmp/21599/gems/RedCloth-4.2.9 for inspection.
Results logged to /home/xxx/.bundler/tmp/21599/gems/RedCloth-4.2.9/ext/redcloth_scan/gem_make.out

An error occurred while installing RedCloth (4.2.9), and Bundler cannot continue.
Make sure that `gem install RedCloth -v '4.2.9'` succeeds before bundling.
</code></pre>

<h3>rvm来了</h3>

<p>好吧，老老实实的Google，各种答案铺天盖地，看来看去呢，基本上都是要rvm。在终端中执行rvm试试看
提示可以通过 <code>sudo apt-get install ruby-rvm</code>来安装， so easy！ 但是敲了这段命令后，你会得到一个奇葩的结果<code>Error:未发现软件包ruby-rvm</code>o(╯□╰)o。哇哈哈，这都难不倒我的，google下rvm怎么安装。好么，要用到另一个名曰curl的家伙，这回apt-get是可以安装的。然后执行<code>curl -L https://get.rvm.io | bash -s stable</code> 就可安装rvm了。<br/>
<code>rvm -v</code>显示</p>

<pre><code>rvm 1.25.6 (stable) by Wayne E. Seguin &lt;wayneeseguin@gmail.com&gt;, Michal Papis &lt;mpapis@gmail.com&gt; [https://rvm.io/]
</code></pre>

<p>(ps:你得先执行<code>source ~/.rvm/scripts/rvm</code>载入rvm,不然bash又要提示你<code>sudo apt-get install ruby-rvm</code>了。)</p>

<h3>rvm傻了</h3>

<p>安装完rvm之后呢，执行<code>rvm install 1.9.3</code>，哇哈哈，过关斩将，毫不留情。这回<code>bundle install</code>试试看，错误依旧。( ⊙ o ⊙ )<br/>
没关系，再来，google到有人说要这样安装</p>

<figure class='code'><figcaption><span>sample code</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rvm pkg install openssl
</span><span class='line'>rvm install 1.9.3 --with-openssl-dir<span class="o">=</span><span class="nv">$rvm_path</span>/usr
</span></code></pre></td></tr></table></div></figure>


<p>这&#8230;和openssl什么关系？？？，不明觉历，姑且一试。
事实上，第一条命令就执行错误了</p>

<pre><code>Error running 'update_openssl_certs',
showing last 15 lines of /home/neeo/.rvm/log/1387980721/openssl.certs.log
</code></pre>

<p>第二条呢，是这样的结果</p>

<pre><code>Already installed ruby-1.9.3-p484.
To reinstall use:

    rvm reinstall ruby-1.9.3-p484

Gemset '' does not exist, 'rvm ruby-1.9.3-p484 do rvm gemset create ' first, or append '--create'.
</code></pre>

<p>根据提示，执行 <code>rvm ruby-1.9.3-p484 do rvm gemset create</code>
结果是</p>

<pre><code>Ruby ruby-1.9.3-p484 is not installed.
</code></pre>

<p>这一会儿说<strong>Already installed</strong>，一会儿又说<strong>not installed</strong>，是要闹哪样儿？？？</p>

<h3>问题解决</h3>

<p>回顾整个过程，在参照这篇<a href="http://ruby-china.org/wiki/install_ruby_guide">博客</a>，灵光一闪，会不会是因为用apt-get安装了ruby1.9.3的缘故？试试看吧，先执行<code>sudo apt-get remove ruby1.9.3</code>卸载掉。然后<code>rvm reinstall ruby-1.9.3-p484</code>经过非常非常非常无比漫长，洗了个澡依然没有结束的等待之后，再次执行<code>bundle install</code>，感谢郭嘉，顺利通过了。</p>

<h3>结论</h3>

<p>至于ruby是怎么回事儿？为什么这样安装会产生这样的问题？不知道。linux小白玩linux就是太折腾。最后再吐槽一下，新换的房子网络真是垃圾到爆了，各种卡有没有？各种loading没完没了有没有？看个优酷都只能标清还得缓冲有没有？室友忽悠我搬过来的时候还各种骄傲的说网络多么多么NB有没有？(╰_╯)</p>

<h3>后记</h3>

<p>第二天在新开的terminal下，又挂了，rake不工作，提示bundle install，然后重复问题出现，当时我就崩溃了。后来找到了两个解决方案
一个是<a href="http://stackoverflow.com/questions/12119138/failed-to-build-gem-native-extension-when-install-redcloth-4-2-9-install-linux">StackOverflow</a>上有人说看了<code>mkmf.log</code>文件（我没找到这个文件）后，得知是因为<code>gcc-4.2</code>没有安装的缘故，给出的解决方案是</p>

<pre><code>$ sudo ln -s /usr/bin/gcc /usr/bin/gcc-4.2
$ bundle install
</code></pre>

<p>我查看了下本机的<code>/usr/bin/</code>下也的确没有<code>gcc-4.2</code>，按照这种方式创建了一个<code>gcc</code>的引用，重新<code>bundle install</code>（我恨死这货了），依然是同样的问题。
后来，我找到了<a href="http://tarashish.com/blog/2013/02/02/fixing-mkmf-load-error-ubuntu/">这个</a>，执行了这个</p>

<pre><code>$ sudo apt-get install ruby1.9.1-dev
</code></pre>

<p>问题解决了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[how to edit boot menu by bcedit]]></title>
    <link href="http://www.orcame.com/blog/2013/10/07/how-to-edit-boot-menu-by-bcedit/"/>
    <updated>2013-10-07T19:51:00+08:00</updated>
    <id>http://www.orcame.com/blog/2013/10/07/how-to-edit-boot-menu-by-bcedit</id>
    <content type="html"><![CDATA[<p>Copy your vm file(*.vhd for example) to a folder, D:\boot eg.</p>

<p>Open cmd as administrator</p>

<figure class='code'><figcaption><span>command line script</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bat'><span class='line'><span class="c">rem {current} is a identifier id. can also specifier the identifier id. This is used to backup the {current} setting, ignore it if you dont want. </span>
</span><span class='line'><span class="c">rem **strongly recommend**</span>
</span><span class='line'>bcdedit <span class="n">/copy</span> {current} <span class="n">/d</span> <span class="s2">&quot;current_backup&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c">rem set the device(the vhd file)</span>
</span><span class='line'>bcdedit <span class="n">/set</span> {current} device vhd<span class="o">=</span>[d:]\vhd path to file
</span><span class='line'><span class="c">rem bcdedit /set {current} device vhd=[d:]\boot\xxxx.vhd for example.</span>
</span><span class='line'>
</span><span class='line'><span class="c">rem set the osdevice(same path of the device)</span>
</span><span class='line'>bcdedit <span class="n">/set</span> {current} osdevice vhd<span class="o">=</span>[d:]\vhd path to file
</span><span class='line'>
</span><span class='line'><span class="c">rem set the default boot item(ignore this if you dont want make the new system as the default one)</span>
</span><span class='line'>bcdedit <span class="n">/set</span> {bootmgr} default {current} <span class="n">//guid.</span>
</span></code></pre></td></tr></table></div></figure>


<p>reboot os and enjoy the new system.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[简单的Go语言]]></title>
    <link href="http://www.orcame.com/blog/2013/08/11/jian-dan-de-goyu-yan/"/>
    <updated>2013-08-11T19:35:00+08:00</updated>
    <id>http://www.orcame.com/blog/2013/08/11/jian-dan-de-goyu-yan</id>
    <content type="html"><![CDATA[<p>最近小小的看了下Golang，这里记录一下相当初级的语法规则。</p>

<h2>Hello Go</h2>

<figure class='code'><figcaption><span>hello go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'><span class="kn">import</span> <span class="nx">fmt</span> <span class="s">&quot;fmt&quot;</span>  <span class="c1">// 导入fmt库，用于IO操作，这里import 相当于C中的#include</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Hello, golang&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>import 还可以写成下面的样式</p>

<figure class='code'><figcaption><span>import 补充</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">import</span><span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;math&quot;</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<h2>变量</h2>

<p>golang是<strong>静态语言</strong>，变量声明需要类型。
具体请看下面代码示例：</p>

<figure class='code'><figcaption><span>关于变量</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// 变量声明</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">i</span> <span class="kt">int</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">str</span> <span class="kt">string</span><span class="p">=</span><span class="s">&quot;hello golang&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 在一个语句中声明多个变量</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">,</span><span class="nx">z</span> <span class="kt">int</span> <span class="p">=</span> <span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">8</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 可以根据变量值反推变量类型</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">value</span><span class="p">=</span><span class="mi">100</span><span class="c1">//这里的value是int类型</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 如果在**函数体内部**</span>
</span><span class='line'><span class="c1">// 可以这样声明变量</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">demo</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">inner</span><span class="o">:=</span><span class="kc">true</span> <span class="c1">//这里相当于 var inner int=100</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>常量</h2>

<p>常量部分官方的说法是：</p>

<blockquote><ul>
<li>Constants are declared like variables, but with the const keyword.</li>
<li>Constants can be character, string, boolean, or numeric values.</li>
<li>Constants cannot be declared using the := syntax.</li>
</ul>
</blockquote>

<p>意思就是：</p>

<blockquote><ul>
<li>常量的声明和变量类似，用<strong>const</strong>关键字</li>
<li>常量只能是内置类型，例如:char,string,boolean,int,floag&#8230;</li>
<li>常量不能用 := 的方式声明</li>
</ul>
</blockquote>

<figure class='code'><figcaption><span>声明一个常量</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">const</span> <span class="nx">con</span> <span class="kt">string</span> <span class="p">=</span> <span class="s">&quot;这个是常量&quot;</span>
</span><span class='line'><span class="c1">//对比</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">val</span> <span class="kt">string</span> <span class="p">=</span> <span class="s">&quot;这是一个变量&quot;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">const</span> <span class="nx">err</span> <span class="o">:=</span> <span class="s">&quot;这是错误的常量声明方式.&quot;</span>
</span><span class='line'><span class="c1">//对比</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">right</span> <span class="o">:=</span> <span class="s">&quot;这是正确的变量声明方式.&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>golang 的内置类型包括以下几种</p>

<blockquote><ul>
<li>bool</li>
<li>string</li>
<li>int, int8, int16, int32, int64</li>
<li>uint, uint8, uint16, uint32, uint64, uintptr</li>
<li>byte // alias for uint8</li>
<li>rune // alias for int32</li>
<li>float32, float64</li>
<li>complex64, complex128</li>
</ul>
</blockquote>

<h2>数组与切片</h2>

<h3>数组</h3>

<figure class='code'><figcaption><span>数组的定义</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">var</span> <span class="nx">arr</span> <span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="kt">int</span> <span class="c1">//这样定义的数组初始值为[0,0,0,0,0,0,0,0,0,0]</span>
</span><span class='line'>
</span><span class='line'><span class="nx">arr</span><span class="o">:=</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="kt">int</span><span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">}</span> <span class="c1">//这样的语句只能出现在function内部</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">arr2</span> <span class="p">[</span><span class="mi">3</span><span class="p">][</span><span class="mi">3</span><span class="p">]</span><span class="kt">int</span> <span class="c1">//这是一个二维数组</span>
</span><span class='line'>
</span><span class='line'><span class="nb">len</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span> <span class="c1">//用内置len方法获取数组长度</span>
</span></code></pre></td></tr></table></div></figure>


<h3>切片</h3>

<figure class='code'><figcaption><span>切片操作</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">arr</span> <span class="o">:=</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="kt">int</span><span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">}</span>
</span><span class='line'><span class="nx">slice</span> <span class="o">:=</span><span class="nx">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="mi">4</span><span class="p">]</span> <span class="c1">//arr下标1～3的内容，不包括a[4]</span>
</span><span class='line'>
</span><span class='line'><span class="nx">slice</span> <span class="p">=</span><span class="nx">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span> <span class="c1">//arr[1] 到arr[4]，即1到结尾，包括结尾</span>
</span><span class='line'>
</span><span class='line'><span class="nx">slice</span> <span class="p">=</span><span class="nx">arr</span><span class="p">[:</span><span class="mi">4</span><span class="p">]</span> <span class="c1">//arr[0] 到arr[3], 不包括arr[4]</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>注意：</strong>数组的赋值是copy式的，见如下代码：</p>

<figure class='code'><figcaption><span>数组和切片的操作</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">arr1</span> <span class="o">:=</span> <span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="kt">int</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">}</span><span class="c1">//这样的声明是一个数组(长度是数组类型的一部分)</span>
</span><span class='line'>  <span class="nx">slice1</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">}</span><span class="c1">//这样的声明是一个切片</span>
</span><span class='line'>  <span class="nx">arr2</span> <span class="o">:=</span><span class="nx">arr1</span> <span class="c1">//arr2是arr1的一个副本</span>
</span><span class='line'>  <span class="nx">slice2</span> <span class="o">:=</span><span class="nx">slice1</span> <span class="c1">//slice2是slice1的一个引用</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;arr1:&quot;</span><span class="p">,</span><span class="nx">arr1</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;arr2:&quot;</span><span class="p">,</span><span class="nx">arr2</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;slice1:&quot;</span><span class="p">,</span><span class="nx">slice1</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;slice2:&quot;</span><span class="p">,</span><span class="nx">slice2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">arr2</span><span class="p">[</span><span class="mi">3</span><span class="p">]=</span><span class="mi">100</span>
</span><span class='line'>  <span class="nx">slice2</span><span class="p">[</span><span class="mi">3</span><span class="p">]=</span><span class="mi">300</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;---after change arr2[3]=100 &amp; slice2[3]=300---&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;arr1:&quot;</span><span class="p">,</span><span class="nx">arr1</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;arr2:&quot;</span><span class="p">,</span><span class="nx">arr2</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;slice1:&quot;</span><span class="p">,</span><span class="nx">slice1</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;slice2:&quot;</span><span class="p">,</span><span class="nx">slice2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">slice4arr</span><span class="o">:=</span><span class="nx">arr1</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="mi">4</span><span class="p">]</span> <span class="c1">//slice4arr是对arr1[1,2,3]的一个引用</span>
</span><span class='line'>  <span class="nx">slice4arr</span><span class="p">[</span><span class="mi">2</span><span class="p">]=</span><span class="mi">400</span> <span class="c1">//slice4arr[2]指向的是arr1[3]</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;---after change slice4arr[2]=400---&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;arr1:&quot;</span><span class="p">,</span><span class="nx">arr1</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;arr2:&quot;</span><span class="p">,</span><span class="nx">arr2</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;slice1:&quot;</span><span class="p">,</span><span class="nx">slice1</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;slice2:&quot;</span><span class="p">,</span><span class="nx">slice2</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>程序的输出是：</p>

<figure class='code'><figcaption><span>数组和切片操作结果</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">arr1</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span><span class="p">]</span>
</span><span class='line'><span class="nx">arr2</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span><span class="p">]</span>
</span><span class='line'><span class="nx">slice1</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span><span class="p">]</span>
</span><span class='line'><span class="nx">slice2</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span><span class="p">]</span>
</span><span class='line'><span class="o">---</span><span class="nx">after</span> <span class="nx">change</span> <span class="nx">arr2</span><span class="p">[</span><span class="mi">3</span><span class="p">]=</span><span class="mi">100</span> <span class="o">&amp;</span> <span class="nx">slice2</span><span class="p">[</span><span class="mi">3</span><span class="p">]=</span><span class="mi">300</span><span class="o">---</span>
</span><span class='line'><span class="nx">arr1</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span><span class="p">]</span>
</span><span class='line'><span class="nx">arr2</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">100</span> <span class="mi">5</span><span class="p">]</span>
</span><span class='line'><span class="nx">slice1</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">300</span> <span class="mi">5</span><span class="p">]</span>
</span><span class='line'><span class="nx">slice2</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">300</span> <span class="mi">5</span><span class="p">]</span>
</span><span class='line'><span class="o">---</span><span class="nx">after</span> <span class="nx">change</span> <span class="nx">slice4arr</span><span class="p">[</span><span class="mi">2</span><span class="p">]=</span><span class="mi">400</span><span class="o">---</span>
</span><span class='line'><span class="nx">arr1</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">400</span> <span class="mi">5</span><span class="p">]</span>
</span><span class='line'><span class="nx">arr2</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">100</span> <span class="mi">5</span><span class="p">]</span>
</span><span class='line'><span class="nx">slice1</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">300</span> <span class="mi">5</span><span class="p">]</span>
</span><span class='line'><span class="nx">slice2</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">300</span> <span class="mi">5</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>if语句</h2>

<p>golang中if语句是没有小括号()的，但必须包括花括号{},并且<strong>{符号不能放置在下一行</strong>（这个约定其实和golang中的分号;有关)</p>

<figure class='code'><figcaption><span>if 语句</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">//这是正确的写法</span>
</span><span class='line'><span class="k">if</span> <span class="kc">true</span><span class="p">{</span>
</span><span class='line'>  <span class="c1">//do something...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//这是错误的写法</span>
</span><span class='line'><span class="k">if</span> <span class="kc">true</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">//do something...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//if -else if -else 语句</span>
</span><span class='line'><span class="k">if</span> <span class="nx">a</span><span class="p">&gt;</span><span class="mi">0</span><span class="p">{</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="p">}</span><span class="k">else</span> <span class="k">if</span> <span class="nx">a</span><span class="o">==</span><span class="mi">0</span><span class="p">{</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="p">}</span><span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>switch 语句</h2>

<p>switch 同if一样没有小括号，但必须有花括号。case不需要break，可以用逗号分割多个值.<strong>{符号不能放置在下一行</strong></p>

<figure class='code'><figcaption><span>switch 语句</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">switch</span> <span class="nx">value</span><span class="p">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;eq one&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">case</span> <span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">:</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;lt five&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">default</span><span class="p">:</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="err">&quot;</span><span class="nx">lt</span> <span class="nx">one</span> <span class="nx">or</span> <span class="nx">gt</span> <span class="nx">four</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>for 循环</h2>

<p>golang中for循环有三种形式, 同if一样没有小括号，但必须有花括号。<strong>{符号不能放置在下一行</strong></p>

<figure class='code'><figcaption><span>for loop</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">//init;condition;post 形式</span>
</span><span class='line'><span class="k">for</span> <span class="nx">idx</span><span class="o">:=</span><span class="mi">0</span><span class="p">;</span><span class="nx">idx</span><span class="p">&lt;</span><span class="nb">len</span><span class="p">(</span><span class="nx">arr</span><span class="p">);</span><span class="nx">idx</span><span class="o">++</span><span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">idx</span><span class="p">])</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//only condition 形式</span>
</span><span class='line'>
</span><span class='line'><span class="nx">idx</span><span class="o">:=</span><span class="mi">0</span>
</span><span class='line'><span class="k">for</span> <span class="nx">idx</span><span class="p">&lt;</span><span class="nb">len</span><span class="p">(</span><span class="nx">arr</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">idx</span><span class="p">])</span>
</span><span class='line'>  <span class="nx">idx</span><span class="o">++</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//forever</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span><span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Never die&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong><em>golang 中没有 while语句，for语句已经包含了while的功能</em></strong></p>

<h2>函数</h2>

<p>golang中函数的声明和C略有不同，返回值类型放在了后面</p>

<figure class='code'><figcaption><span>golang中的函数声明</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">sum</span><span class="p">(</span><span class="nx">a</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">b</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">a</span><span class="o">+</span><span class="nx">b</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//也可以写成下面这样：</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">sum</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">a</span><span class="o">+</span><span class="nx">b</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//函数可以有不定个数的参数</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">sum</span><span class="p">(</span><span class="nx">values</span> <span class="o">...</span><span class="kt">int</span><span class="p">){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">total</span> <span class="kt">int</span> <span class="p">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">_</span><span class="p">,</span><span class="nx">v</span> <span class="o">:=</span><span class="k">range</span> <span class="nx">values</span><span class="p">{</span>
</span><span class='line'>              <span class="c1">//这里用了一个变量 _，golang中如果一个变量声明了但没有使用是不允许的，所以有了这个特殊的_</span>
</span><span class='line'>              <span class="c1">//对于_，golang在编译的时候不会做0使用的验证。如果需要访问下标，可以写作for idx,value :=range values....</span>
</span><span class='line'>      <span class="nx">total</span><span class="o">+=</span><span class="nx">v</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">total</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//函数还可以闭包，熟悉js的人对这个不会陌生</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">next</span><span class="p">()</span> <span class="kd">func</span><span class="p">()</span> <span class="kt">int</span><span class="p">{</span>
</span><span class='line'>  <span class="nx">i</span><span class="o">:=</span><span class="mi">0</span>
</span><span class='line'>  <span class="k">return</span> <span class="kd">func</span><span class="p">()</span><span class="kt">int</span><span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">i</span><span class="o">++</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//调用：</span>
</span><span class='line'><span class="nx">nextInt</span> <span class="o">:=</span><span class="nx">next</span><span class="p">()</span>
</span><span class='line'><span class="k">for</span><span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">nextInt</span><span class="p">())</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>结构体</h2>

<p>还是看代码吧</p>

<figure class='code'><figcaption><span>结构体</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">type</span> <span class="nx">Panda</span> <span class="kd">struct</span><span class="p">{</span>
</span><span class='line'>  <span class="nx">name</span> <span class="kt">string</span>
</span><span class='line'>  <span class="nx">weight</span> <span class="kt">int</span>
</span><span class='line'>  <span class="nx">description</span> <span class="kt">string</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//结构体的初始化有一下几种方式</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">paul</span> <span class="nx">Panda</span><span class="p">=</span><span class="nx">Panda</span><span class="p">{</span><span class="s">&quot;Paul&quot;</span><span class="p">,</span><span class="mi">1000</span><span class="p">,</span><span class="s">&quot;神龙大侠&quot;</span><span class="p">}</span>
</span><span class='line'><span class="c1">//或者</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">paul</span> <span class="nx">Panda</span><span class="p">=</span><span class="nx">Panda</span><span class="p">{</span><span class="nx">name</span><span class="p">:</span><span class="s">&quot;Paul&quot;</span><span class="p">,</span><span class="nx">description</span><span class="p">:</span><span class="s">&quot;神龙大侠&quot;</span><span class="p">,</span><span class="nx">weight</span><span class="p">:</span><span class="mi">1000</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>结构体的方法是比较特殊的，同C#等不同，不能在结构体内部声明，需要如此这般</p>

<figure class='code'><figcaption><span>结构体方法</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Panda</span><span class="p">)</span> <span class="nx">Box</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;打出一记肥猫拳&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Panda</span><span class="p">)</span> <span class="nx">Kick</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;佛山无影脚，阿达～～～～&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>注意:</strong> golang中没有访问限制关键之，public，private，protected等，约定首字母大写的方法即为public(可以被别的包访问)</p>

<h2>接口</h2>

<p>接口是这样定义的</p>

<figure class='code'><figcaption><span>interface定义</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">type</span> <span class="nx">swordsman</span> <span class="kd">interface</span><span class="p">{</span> <span class="c1">//大侠会打拳和踢人</span>
</span><span class='line'>  <span class="nx">Box</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">Kick</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>注意</strong> golang中的接口是不需要显示继承的，golang认为有A的功能就是一个A，这里就是<strong>会打拳和踢人的就是大侠</strong>，那么Panda已经实现了swordsman接口，paul是一个大侠了</p>

<figure class='code'><figcaption><span>看看作为大侠的paul</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">var</span> <span class="nx">paul</span> <span class="nx">Panda</span><span class="p">=</span><span class="nx">Panda</span><span class="p">{</span><span class="s">&quot;Paul&quot;</span><span class="p">,</span><span class="mi">1000</span><span class="p">,</span><span class="s">&quot;神龙大侠&quot;</span><span class="p">}</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">sw</span> <span class="nx">swardsman</span><span class="p">=</span><span class="o">&amp;</span><span class="nx">paul</span>
</span><span class='line'><span class="nx">sw</span><span class="p">.</span><span class="nx">Box</span><span class="p">()</span>
</span><span class='line'><span class="nx">sw</span><span class="p">.</span><span class="nx">Kick</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h2>关于分号;</h2>

<p>golang 的唯一需要分号的地方是作为for循环中的init;condition;post分割符;在编译代码过程中，词法分析器会自动的为代码添加上分号，所以写代码的时候不需要写分号。词法分析器添加分号的规则是：</p>

<blockquote><p>行尾最后一个token（这当然不包括注释）是一个标识符，数值、字符串等字面值，或者++,&#8211;,break, fallthrough,continue, return中的一个</p></blockquote>

<p>按照以上规则，<strong>千万不要尝试在将for，switch，if等代码体的{写到下一行，因为这样会导致在{之前加入一个分号(;),引起错误。</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[愿生者平安，逝者安息]]></title>
    <link href="http://www.orcame.com/blog/2013/04/21/for-yaan/"/>
    <updated>2013-04-21T22:02:00+08:00</updated>
    <id>http://www.orcame.com/blog/2013/04/21/for-yaan</id>
    <content type="html"><![CDATA[<p> <img src="http://www.orcame.com/images/image-post/yaan.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[测试代码高亮]]></title>
    <link href="http://www.orcame.com/blog/2013/03/04/code-hightlight/"/>
    <updated>2013-03-04T22:47:00+08:00</updated>
    <id>http://www.orcame.com/blog/2013/03/04/code-hightlight</id>
    <content type="html"><![CDATA[<h2>Javascript</h2>

<figure class='code'><figcaption><span>这是一段javascript代码</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;click on &#39;</span><span class="o">+</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<h2>C</h2>

<figure class='code'><figcaption><span>这是一段C语言代码</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;hello world&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>C Sharp</h2>

<figure class='code'><figcaption><span>这是一段C#代码</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Human</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">private</span> <span class="kt">string</span> <span class="n">name</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="nf">Human</span><span class="p">(</span><span class="kt">string</span> <span class="n">name</span><span class="p">){</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="n">name</span><span class="p">=</span><span class="n">name</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">void</span> <span class="nf">SayHi</span><span class="p">(){</span>
</span><span class='line'>      <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">&quot;Hi, I am {0}. Nice to meet you.&quot;</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="n">name</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Golang</h2>

<figure class='code'><figcaption><span>这是一段golang代码</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nx">fmt</span> <span class="s">&quot;fmt&quot;</span>  <span class="c1">// Package implementing formatted I/O.</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Hello, world; or Καλημέρα κόσμε; or こんにちは 世界\n&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Python</h2>

<figure class='code'><figcaption><span>这是一段Python代码</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'><span class="c"># Filename: mymodule.py</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">sayhi</span><span class="p">():</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&#39;Hi, this is mymodule speaking.&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">version</span> <span class="o">=</span> <span class="s">&#39;0.1&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># End of mymodule.py</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitHub + Octopress 搭建个人Blog]]></title>
    <link href="http://www.orcame.com/blog/2013/03/02/hello-git-world/"/>
    <updated>2013-03-02T16:25:00+08:00</updated>
    <id>http://www.orcame.com/blog/2013/03/02/hello-git-world</id>
    <content type="html"><![CDATA[<h2>预备知识</h2>

<h3>Octopress是什么？</h3>

<p>Octopress是一个基于jekyll的博客系统，用Ruby语言编写。Octopress使用静态页面，内容不依赖于数据库，可以使用纯文本，HTML，markdown标记语言写文章。</p>

<!-- more -->


<h3>jekyll是什么?</h3>

<p>请看<a href="http://jekyllrb.com/">这里</a>和<a href="http://www.soimort.org/posts/101/">这里</a></p>

<h3>markdown是什么?</h3>

<p>直接看这个<a href="http://wowubuntu.com/markdown/">教程</a>或这个<a href="http://equation85.github.com/blog/markdown-examples/">教程+示例</a></p>

<h3>github是什么？</h3>

<p>老兄，你out了，自己Google去(友情提示，为了宇宙的安宁，远离baidu)。<br/>
哦，别忘了注册一个Github的账号，稍后有用。</p>

<h2>准备环境</h2>

<h3>安装git</h3>

<p>到<a href="http://www.github.com">github</a>上下载<a href="https://help.github.com/articles/set-up-git">安装包</a>。<br/>
配置github，执行</p>

<pre><code>ls ~/.ssh  
</code></pre>

<p>若结果为</p>

<pre><code>id_rsa  id_rsa.pub  known_hosts
</code></pre>

<p>执行</p>

<pre><code>mv ~/.ssh ~/.ssh_backup  
</code></pre>

<p>备份ssh key，执行</p>

<pre><code>ssh-keygen -t rsa -C "你的邮箱地址，例如yourname@gmail.com"
&lt;span color="green"&gt;Generating public/private rsa key pair.&lt;/span&gt;
&lt;span color="green"&gt;Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):&lt;/span&gt;  #此处直接回车   

Enter passphrase (empty for no passphrase):  #此处输入加密串，输入状态是看不到的
Enter same passphrase again:  #确认刚刚输入的加密串
</code></pre>

<p>目前为止，成功生成SSH key，在github上的账号设置中，<strong>添加新的SSH key</strong> ，随便起个名字，将<code>~/.ssh</code>目录下的文件<code>id_rsa.pub</code>中的内容黏贴到Key域中。</p>

<p>执行</p>

<pre><code>ssh -T git@github.com
</code></pre>

<p>会提示</p>

<pre><code>The authenticity of host 'github.com (207.97.227.243)' can't be established.
RSA key fingerprint is xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:4d:ae:34:ed:76.
Are you sure you want to continue connecting (yes/no)?
</code></pre>

<p>莫要惊慌，直接输入<code>yes</code></p>

<pre><code>Hi xxxxx! You've successfully authenticated, but GitHub does not provide shell access.
</code></pre>

<p>然后执行</p>

<pre><code>git config --global user.name "your_name"
git config --global user.email "your_mail_box_address"  
</code></pre>

<p>到github上面创建一个名称为yourusername.github.com的pro，过程很简单，如不会创建，请google</p>

<p>大功告成了一小步。</p>

<h3>安装Ruby</h3>

<p>执行<code>ruby -v</code>查看系统版本号，如果不低于<strong>1.9.3</strong>, 跳过此步骤 <br/>
安装步骤请看这个<a href="http://ruby-china.org/wiki/install_ruby_guide">教程</a>,需要<strong>注意</strong>的是，我们要安装的版本为<span style="color:red">1.9.3</span>，将教程中的版本号(如果低于1.9.3)替换为1.9.3<br/>
安装好Rubby后，执行<code>rvm use 1.9.3</code>更改版本号，若出现</p>

<pre><code>RVM is not a function, selecting rubies with 'rvm use ...' will not work.

You need to change your terminal emulator preferences to allow login shell.
Sometimes it is required to use `/bin/bash --login` as the command.
Please visit https://rvm.io/integration/gnome-terminal/ for a example.
</code></pre>

<p>在终端窗口中 编辑-配置文件首选项-标题和命令-勾选 以登录Shell方式运行命令 ，重启终端后重新执行 <code>rvm use 1.9.3</code>，如顺利通过，恭喜你，走出了阿母斯特朗的一小步。</p>

<h3>安装Octopress</h3>

<pre><code>git clone git://github.com/imathis/octopress.git your_blog_folder #获取octopress
cd your_blog_folder    #如果有提示（提升ruby版本号),yes到底  

gem install bundler 
bundle install  

rake install
</code></pre>

<h3>配置Octopress</h3>

<p>在your_blog_folder下面有一个<code>_config.yml</code>文件，编辑该文件的内容</p>

<pre><code>url: yourusername.github.com
title: your blog title
subtitle: your blog sub title
author: your name
simple_search: http://google.com/search
description: your blog descritpion.
......
</code></pre>

<p>内容很简单，以您的智慧，想不懂都难，需要注意的是每一项key和value之间的 冒号(:)后面是有一个 <strong>空格</strong> 的，否则会报错。</p>

<h2>发表博客</h2>

<h3>写文章</h3>

<p>执行</p>

<pre><code>rake new_post["hello github"] 
</code></pre>

<p>会在”your_blog_folder/source/_post”下生成一个xx.makedown文件，用您在<a href="http://wowubuntu.com/markdown/">这里</a>或<a href="http://equation85.github.com/blog/markdown-examples/">这里</a>学到的markdown语法来编辑文章就行了。</p>

<p>执行</p>

<pre><code>rake generate
rake preview
</code></pre>

<p>打开 localhost:4000 预览博客</p>

<h3>发表文章</h3>

<p>预览文章没有问题了，执行</p>

<pre><code>rake deploy
</code></pre>

<p>发布博客，等待一段时间，大概10分钟。打开http://yourusername.github.com 就可以访问刚刚生成的博客了。</p>

<h3>绑定域名</h3>

<p>如果需要绑定域名，可以在your_blog_folder目录下面建立一个名称为<code>CNAME</code>的文本文件，注意无后缀名，内容为</p>

<pre><code>www.yourdomain.com
</code></pre>

<p>然后在你的域名提供商处将DNS改为<code>204.232.175.78</code>(pages.github.com的IP地址，可以ping一下，以获取的内容为准)<br/>
等待一段时间后域名生效，就可以通过www.yourdomain.com访问博客了。（留意您的邮箱，有错误github会提示您的）</p>
]]></content>
  </entry>
  
</feed>
