<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: azure | Code Infinity]]></title>
  <link href="http://www.orcame.com/blog/categories/azure/atom.xml" rel="self"/>
  <link href="http://www.orcame.com/"/>
  <updated>2013-12-30T22:27:16+08:00</updated>
  <id>http://www.orcame.com/</id>
  <author>
    <name><![CDATA[orcame]]></name>
    <email><![CDATA[orcame@outlook.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Windows Azure Shared Access Signature简介]]></title>
    <link href="http://www.orcame.com/blog/2013/12/29/windows-azure-sas-introduce/"/>
    <updated>2013-12-29T22:26:00+08:00</updated>
    <id>http://www.orcame.com/blog/2013/12/29/windows-azure-sas-introduce</id>
    <content type="html"><![CDATA[<h2>What</h2>

<p>Shared Access Signature(SAS),共享访问签名，是用于提供对Windows Azure Storage中的Container，Blob，Table以及Queue在特定时间范围内进行有限权限访问的URL。</p>

<!--more-->


<h2>Why</h2>

<p>通常情况下，对Azure Storage的访问是通过账户名和密钥来实现的，这样的认证方式赋予了使用者包括增删改在内的最大的访问权限，而实际应用当中，有许多场景是希望能够限定用户的权限的，比方常见的只读权限，并且也不希望将密钥泄露给用户，这样存在很大的安全隐患。使用SAS可以很好的解决这个问题。</p>

<h2>How</h2>

<h3>功能介绍</h3>

<p>SAS提供的功能包括</p>

<h5>For Blob</h5>

<ul>
<li>读写Blob及其属性和元数据</li>
<li>删除、租赁和创建 Blob 快照</li>
<li>读取Container的Blob列表</li>
</ul>


<h5>For Table</h5>

<ul>
<li>增、删、改、查(version>='2012-02-12'可用)</li>
</ul>


<h5>For Queue</h5>

<ul>
<li>增删改队列消息(version>='2012-02-12'可用)</li>
<li>读取队列元数据，消息计数(version>='2012-02-12'可用)</li>
</ul>


<h3>表现形式</h3>

<p>一个典型的SAS(以Blob为例)为如下形式</p>

<pre><code>https://demostorage.blob.core.chinacloudapi.cn/normal/sasdemo.txt?sv=2013-08-15&amp;sr=b&amp;sig=JqcAqJxPDYn37QU68Xs8dBu0PsoT%2FpkkOE7ShHRstWI%3D&amp;st=2013-12-30T03%3A20%3A05Z&amp;se=2013-12-30T04%3A43%3A25Z&amp;sp=rwd
</code></pre>

<p>由以下几部分组成</p>

<ol>
<li><p>Blob URL</p>

<pre><code> https://demostorage.blob.core.chinacloudapi.cn/normal/sasdemo.txt
</code></pre>

<p>Blob文件的网络路径</p></li>
<li><p>Storage Service Version</p>

<pre><code> sv=2013-08-15
</code></pre>

<p>这是在2012-02-12版本后新加的一个参数，用来标识Storage Service所使用的版本</p></li>
<li><p>Start Time</p>

<pre><code> st=2013-12-30T03%3A20%3A05Z
</code></pre>

采用<a href="http://www.google.com.hk/#newwindow=1&amp;q=ISO+8061&amp;safe=strict">ISO8061</a>格式表示的日期，用来标识该SAS生效的起始时间，可以省略（注意，不是为空，表示立即生效)。
官方文档上说采用的是<a href="http://www.google.com.hk/#newwindow=1&amp;q=ISO+8061&amp;safe=strict">ISO8061</a>格式，我查了半天没找到<a href="http://www.google.com.hk/#newwindow=1&amp;q=ISO+8061&amp;safe=strict">ISO8061</a>,只有<a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601</a>，API产生的字符串是符合<a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601</a>的规范的，这里很有可能是<a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601</a>才对。
附上<a href="http://www.windowsazure.com/en-us/manage/services/storage/net/shared-access-signature-part-1/">官方文档</a>原文

<blockquote><p>Specified in an ISO 8061 format. If you want the SAS to be valid immediately, omit the start time.</p></blockquote></li>
<li><p>Expiry Time</p>

<pre><code> se=2013-12-30T04%3A43%3A25Z
</code></pre>

<p>采用<a href="http://www.google.com.hk/#newwindow=1&amp;q=ISO+8061&amp;safe=strict">ISO8061</a>格式(疑问同上)表示的日期，用来标识该SAS失效时间，这个参数是必须的
注意，在2012-02-12以前的版本中，SAS默认的有效时长最长1小时，也就是说即便你设定的st和se之间的差值为大于一小时的任何时长，该SAS还是会在1小时后自动失效</p></li>
<li><p>Resource</p>

<pre><code> sr=b
</code></pre>

<p>表明该资源是一个Blob</p></li>
<li><p>Permissions</p>

<pre><code> sp=rwd
</code></pre>

<p>该SAS链接拥有的权限，这里是读、写和删除。</p></li>
<li><p>Signature</p>

<pre><code> sig=JqcAqJxPDYn37QU68Xs8dBu0PsoT%2FpkkOE7ShHRstWI%3D
</code></pre>

<p>用于验证对Blob访问的签名</p></li>
</ol>


<!--stop list-->


<h3>SAS与SAP</h3>

<p>可以通过两种方式来创建共享访问签名:</p>

<ul>
<li>独立的SAS（Ad Hoc SAS)<br/>
这个没什么好说的，前面已经做了很多介绍，后面会有代码演示如何创建。</li>
<li>引用SAP（Shared Access Policy，共享访问策略）的SAS<br/>
这里需要先介绍下什么是SAP，SAP的组成形式和SAS是一样的，不同的是SAP是定义在容器，也就是Container、Queue以及Table，级别上的，SAP需要有一个名称，也可以随时被删除（即便Expiry Time还没有到），删除即失效。</li>
</ul>


<h3>失效</h3>

<p>使用SAS的一个关键问题就是何时失效，上面已经有了这方面的介绍，这里做个小结</p>

<ul>
<li>SAS指定的失效时间到了</li>
<li>SAS引用的SAP的失效时间到了<br/>
有两种情况可以导致SAP失效时间到，一是SAP指定的失效时间过了，二是管理员更改了SAP的设定，使其失效时间指向了一个已经过去的时间（这是回收SAP的一种方式）。</li>
<li>SAS引用的SAP被删除了<br/>
这是回收SAP的另外一种方式，<strong>如果你删掉了一个未过期的SAP，之后又创建了另一个同名的有效（未过期）SAP，那么所有引用了该SAP的SAS会继续生效</strong>（注意，此时原继承的过期时间仍然未到），所以为避免发生未预期的错误，需要注意用不同的名字创建SAP</li>
<li>创建SAS的账号密钥被重置<br/>
这种情况下，所有使用该密钥创建的SAP，SAS都会失效。<strong>慎用</strong></li>
</ul>


<h3>使用</h3>

<p>下面用代码片段讲解一下如何使用SAS，Window Aure提供了丰富的API来帮助我们实现该功能，这里以.Net平台，C#语言为例</p>

<h4>Ad hoc SAS</h4>

<p>SAS可以创建在Container上</p>

<p>``` c# 为Container创建SAS
public string GenerateContainerSasUri(string containerName, DateTime? startTime, DateTime expiryTime, SharedAccessBlobPermissions permission)
{</p>

<pre><code>SharedAccessBlobPolicy sasConstraints = new SharedAccessBlobPolicy();
sasConstraints.SharedAccessStartTime = startTime;
sasConstraints.SharedAccessExpiryTime = expiryTime;
sasConstraints.Permissions = permission;
CloudBlobContainer container = GetContainer(containerName);
var sas = container.GetSharedAccessSignature(sasConstraints);
return container.Uri + sas;
</code></pre>

<p>}</p>

<p><code>
也可以创建在Blob上
</code> c# 为Blob创建SAS
public string GenerateBlobSasUri(string containerName, string blobName, DateTime? startTime, DateTime expiryTime, SharedAccessBlobPermissions permission)
{</p>

<pre><code>CloudBlobContainer container = GetContainer(containerName);
CloudBlockBlob blob = container.GetBlockBlobReference(blobName);
SharedAccessBlobPolicy sasConstraints = new SharedAccessBlobPolicy();
sasConstraints.SharedAccessStartTime = startTime;
sasConstraints.SharedAccessExpiryTime = expiryTime;
sasConstraints.Permissions = permission;

string sas = blob.GetSharedAccessSignature(sasConstraints);
return blob.Uri + sas;
</code></pre>

<p>}
```</p>

<p>那么调用</p>

<pre><code>signature = GenerateContainerSasUri(containerName,startTime, endTime, SharedAccessBlobPermissions.Read | SharedAccessBlobPermissions.Write);
</code></pre>

<p>或者调用</p>

<pre><code>signature = provider.GenerateBlobSasUri(containerName, blobName, startTime, endTime, SharedAccessBlobPermissions.Read | SharedAccessBlobPermissions.Write);
</code></pre>

<p>返回的结果就是形如我们上面提到的典型SAS的一个URL</p>

<pre><code>https://demostorage.blob.core.chinacloudapi.cn/normal/sasdemo.txt?sv=2013-08-15&amp;sr=b&amp;sig=JqcAqJxPDYn37QU68Xs8dBu0PsoT%2FpkkOE7ShHRstWI%3D&amp;st=2013-12-30T03%3A20%3A05Z&amp;se=2013-12-30T04%3A43%3A25Z&amp;sp=rwd
</code></pre>

<p>基于SAP的SAS的创建方法略有不同，我们需要首先创建一个SAP，注意，SAP是只能创建在容器(Container,Table,Queue)上的，并且可以随时删除。这里仍然以Container为例。
``` c# 为Container创建SAP
//没有返回值
public void SetContainerSap(string containerName, string policyName, DateTime? startTime, DateTime expiryTime, SharedAccessBlobPermissions permission)
{</p>

<pre><code>CloudBlobContainer container = GetContainer(containerName);
SharedAccessBlobPolicy sharedPolicy = new SharedAccessBlobPolicy()
{
    SharedAccessStartTime = startTime,
    SharedAccessExpiryTime = expiryTime,
    Permissions = permission
};
BlobContainerPermissions permissions = new BlobContainerPermissions();
permissions.SharedAccessPolicies.Clear();
permissions.SharedAccessPolicies.Add(policyName, sharedPolicy);//SAP需要一个Name
container.SetPermissions(permissions);
</code></pre>

<p>}
<code>
</code> c# 删除SAP
public void RemoveContainerSap(string containerName, string policyName)
{</p>

<pre><code>CloudBlobContainer container = GetContainer(containerName);
BlobContainerPermissions permissions = container.GetPermissions();
permissions.SharedAccessPolicies.Remove(policyName);
container.SetPermissions(permissions);
</code></pre>

<p>}</p>

<p>```
如果我们需要创建一个基于SAP的SAS就可以这样子来做</p>

<p>``` c# 为Blob创建基于SAP的SAS
public string GenerateBlobSasUri(string containerName, string blobName,string policyName)
{</p>

<pre><code>CloudBlobContainer container = GetContainer(containerName);
CloudBlockBlob blob = container.GetBlockBlobReference(blobName);
//这里我们没有传入policy参数，只是指定了一个SAP的名称(policyName),这样SAS会继承SAP的设定
string sas = blob.GetSharedAccessSignature(null,policyName);
return blob.Uri + sas;
</code></pre>

<p>}
```
为Container创建基于SAP的SAS方法是类似的，留给大家自己练习。</p>

<hr />

<p><strong><center>——未完待续中——</center></strong></p>
]]></content>
  </entry>
  
</feed>
